<?php
{% for name, field in config_class.fields %}

{% if field.referenceField is defined %}
    /**
     * Find by "{{ name }}" reference.
     *
     * @param MongoId|Document $value
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    private function findBy{{ name|ucfirst }}($value)
    {

        $id = $this->valueToMongoId($value);
        return $this->mergeCriteria(array('{{field.dbName}}' => $id));
    }

    private function findBy{{ name|ucfirst }}Ids(array $ids)
    {
        $ids = $this->getRepository()->idsToMongo($ids);
        return $this->mergeCriteria(array('{{field.dbName}}' => array('$in' => $ids)));
    }

{% else %}
    {% if field.type not in ['serialized', 'bin_data', 'raw'] %}
    /**
     * Find by "{{ name }}" field.
     *
     * @param mixed $value The value.
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    public function findBy{{ name|ucfirst }}($value)
    {
{% if field.type in ['float', 'int', 'date'] %}
        return $this->findBy{{ name|ucfirst }}WithComparison($value, null);
    }

    /**
     * Find by "{{ name }}" field with a value greater-than
     *
     * @param mixed $value The value.
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    public function findBy{{ name|ucfirst }}Gt($value)
    {
        return $this->findBy{{ name|ucfirst }}WithComparison($value, 'gt');
    }

    /**
     * Find by "{{ name }}" field with a value greater-than or equal
     *
     * @param mixed $value The value.
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    public function findBy{{ name|ucfirst }}Gte($value)
    {
        return $this->findBy{{ name|ucfirst }}WithComparison($value, 'gte');
    }

    /**
     * Find by "{{ name }}" field with a value greater-than
     *
     * @param mixed $value The value.
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    public function findBy{{ name|ucfirst }}Lt($value)
    {
        return $this->findBy{{ name|ucfirst }}WithComparison($value, 'lt');
    }

    /**
     * Find by "{{ name }}" field with a value greater-than or equal
     *
     * @param mixed $value The value.
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    public function findBy{{ name|ucfirst }}Lte($value)
    {
        return $this->findBy{{ name|ucfirst }}WithComparison($value, 'lte');
    }

    /**
     * Find by "{{ name }}" field.
     *
     * @param mixed $value The value.
     * @param mixed $comparison 'lt', 'lte', 'gt', 'gte'
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    protected function findBy{{ name|ucfirst }}WithComparison($value, $comparison = null)
    {
{% endif %}

        {% if field.type == 'date' %}
        $castValue = null;
        if (($value instanceOf \DateTime)) {
            $castValue = new \MongoDate($value->getTimestamp());
        } else if ($value instanceof \MongoDate) {
            $castValue = $value;
        } else if (is_numeric($value)) {
            $castValue = new \MongoDate($value);
        }

        if (!$castValue) throw new \Exception('Bad value: could not convert to MongoDate');
        {% elseif field.type == 'string' %}
        $castValue = $value;
        if (!is_string($value)) {
            throw new \Exception('Bad value: type {{field.type}} expected');
        }    
        {% else %}
        $castValue = ({{field.type}}) $value;
        if ((string)$castValue !== (string)$value) {
            throw new \Exception('Bad value: type {{field.type}} expected');
        }
        {% endif %}

{% if field.type in ['float', 'int', 'date'] %}
        if ($comparison !== null) {
            return $this->mergeCriteria(array('{{field.dbName}}' => array('$'.$comparison => $castValue )));
        }
{% endif %}

        return $this->mergeCriteria(array('{{field.dbName}}' => $castValue));

{% endif %}
    }




{% endif %}
{% endfor %}

{% for name, reference in config_class.referencesOne %}
    public function findBy{{ name|ucfirst }}($value)
    {
        return $this->findBy{{reference.field|ucfirst}}($value);
    }

    public function findBy{{ name|ucfirst }}Ids(array $ids)
    {
        return $this->findBy{{reference.field|ucfirst}}Ids($ids);
    }

{% endfor %}

{% for name, reference in config_class.referencesMany %}
    public function findBy{{ name|ucfirst }}($value)
    {
        return $this->findBy{{reference.field|ucfirst}}($value);
    }

    public function findBy{{ name|ucfirst }}Ids(array $ids)
    {
        return $this->findBy{{reference.field|ucfirst}}Ids($ids);
    }

{% endfor %}
