<?php
{% for name, field in config_class.fields %}

{% if field.referenceField is defined %}
    /**
     * Find by "{{ name }}" reference.
     *
     * @param MongoId|Document $value
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    private function findBy{{ name|ucfirst }}($value)
    {

        $id = $this->valueToMongoId($value);
        return $this->mergeCriteria(array('{{field.dbName}}' => $id));
    }

    private function findBy{{ name|ucfirst }}Ids(array $ids)
    {
        $ids = $this->getRepository()->idsToMongo($ids);
        return $this->mergeCriteria(array('{{field.dbName}}' => array('$in' => $ids)));
    }

{% else %}
    {% if field.type not in ['serialized', 'bin_data', 'raw'] %}
    /**
     * Find by "{{ name }}" field.
     *
     * @param mixed $value The value.
     *
     * @return {{ class }}Query The query with added criteria (fluent interface).
     */
    public function findBy{{ name|ucfirst }}($value)
    {
        {% if field.type == 'date' %}
        $castValue = null;
        if (($value instanceOf \DateTime)) {
            $castValue = new \MongoDate($value->getTimestamp());
        } else if ($value instanceof \MongoDate) {
            $castValue = $value;
        } else if (is_int($value)) {
            $castValue = new \MongoDate($value);
        }

        if (!$castValue) throw new \Exception('Bad value: could not convert to MongoDate');
        {% elseif field.type == 'raw' %}
        $castValue = $value;
        {% else %}
        $castValue = ({{field.type}}) $value;
        if ($castValue !== $value) throw new \Exception('Bad value: type {{field.type}} expected');
        {% endif %}

        return $this->mergeCriteria(array('{{field.dbName}}' => $castValue ));
    }

    {% endif %}

{% endif %}
{% endfor %}

{% for name, reference in config_class.referencesOne %}
    public function findBy{{ name|ucfirst }}($value)
    {
        return $this->findBy{{reference.field|ucfirst}}($value);
    }

    public function findBy{{ name|ucfirst }}Ids(array $ids)
    {
        return $this->findBy{{reference.field|ucfirst}}Ids($ids);
    }

{% endfor %}

{% for name, reference in config_class.referencesMany %}
    public function findBy{{ name|ucfirst }}($value)
    {
        return $this->findBy{{reference.field|ucfirst}}($value);
    }

    public function findBy{{ name|ucfirst }}Ids(array $ids)
    {
        return $this->findBy{{reference.field|ucfirst}}Ids($ids);
    }

{% endfor %}

    protected function throwBadReferenceException()
    {
        throw new \Exception('Document or MongoId needed for reference query');
    }
